<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd      
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
 
    <context:component-scan base-package="cn.bagebeyond.oa" >
    	<!--过滤掉控制层的注解  -->
    	<context:exclude-filter type="annotation"
    		 expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <context:property-placeholder location="classpath:jdbc.properties" />  
	<!--注册c3p0数据源 
	1：引入c3p0jar包
	2：注册c3p0的数据源
	 -->
	<!-- <bean id= "dataSource" class = "com.mchange.v2.c3p0.ComboPooledDataSource"> 
		<property name="driverClass" value="${jdbc.driverClass}"></property> 		
   		<property name="jdbcUrl" value="${jdbc.url}"></property>
   		<property name="user" value="${jdbc.username}"></property>
   		<property name="password" value="${jdbc.password}"></property> 
	</bean> -->
	
	
	<!-- 配置druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
	  	<property name="driverClassName" value="${jdbc.driverClass}" />
	  	<property name="url" value="${jdbc.url}" />
      	<property name="username" value="${jdbc.username}" />
      	<property name="password" value="${jdbc.password}" />
	</bean>
	 
	<!--注册jdbc访问数据的事务管理器  -->
	<bean id = "txManager" class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<property name="dataSource" ref = "dataSource"></property>	
	</bean>
	
	<!--开启事物注解驱动  -->
	<tx:annotation-driven  transaction-manager="txManager" />
	
	<!--配置mybaits的SqlSessionFactory  -->
	<bean id = "sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref = "dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-cfg.xml"></property>	
	</bean>
	
	
	<!--基于生成mapper的代理实现的第一种配置方式  -->
	<!-- <bean id = "userMapperClass" class = "org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="cn.bagebeyond.mybatis.sysmanage.mapper.UserMapperClass"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean> -->
	 
	 <!--由于上面第一种方式,每个接口类的实现生成带来都需要配置,不方便
	 	所以,我们需要采用mapper扫描器 MapperScannerConfigurer来配置哪些包下面需要自动创建代理对象  -->
	 	
	 <bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<!--如果有多个报路径,用逗号分开即可  -->
	 	<property name="basePackage" value="cn.bagebeyond.oa.*.mapper"/>
	 	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	 </bean>	
	 	
	<!-- 注册Activiti引擎 -->
     <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
    	<property name="processEngineConfiguration" ref="processEngineConfiguration"></property>
     </bean>
    
     <!-- 注册Activiti引擎的配置 -->
     <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource"></property>
		<property name="transactionManager" ref="txManager"></property>
		<!-- true :如果数据库中不存在表就创建,有就不创建
			 false :如果数据库中不存在表,则抛出异常
			 create-drop:每次都是先删除表,再创建新的表
		  -->
		<property name="databaseSchemaUpdate" value="true"></property>
     </bean>


     <!-- 注册activiti的各种服务接口 -->
     <!-- 流程资源服务接口 -->
	 <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"></bean>
	 <!-- 流程运行服务接口 -->
	 <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"></bean>
	 <!-- 流程任务服务接口 -->
	 <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"></bean>
	 <!-- 流程历史服务接口 -->
	 <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"></bean>
	 <!-- 表单服务接口 -->
	 <bean id="formService" factory-bean="processEngine" factory-method="getFormService"></bean>
	 

	 <!-- <import resource="springContext-jedis.xml"/> -->
	 
	 	
</beans>